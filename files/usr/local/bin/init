#!/bin/bash

#
# (Re-)Configures Apache, PHP and XDebug and runs
# what was given as command line arguments
#

# Use the same environment as during build
. /etc/environment

# Show version info, trying to get the actual TYPO3 version from composer.lock
RE='^([0-9]+\.){2,}[0-9]+'
CURRENT_TYPO3_VER=$(jq --raw-output '[.packages|.[]|{(.name): .version}]|add|."typo3/cms-core"' $TYPO3_ROOT/composer.lock 2>/dev/null) \
    && [[ "$CURRENT_TYPO3_VER" =~ $RE ]] && TYPO3_VER=$CURRENT_TYPO3_VER
echo $'\n*** '"TYPO3 ${TYPO3_VER}, container image: ${IMAGE_VER} (built on $(date --reference ${TYPO3_ROOT} --rfc-2822))"$' ***\n'
httpd -v
php --version
echo

# Things to do only on startup (but not on 't3 env')
if [ $$ -eq 1 ]; then
    # Try to determine the local timezone if none was specified
    [ -z "$TIMEZONE" ] && TIMEZONE="$(curl -s https://ipapi.co/timezone)"

    # Use timezone if specified and supported
    if [ -n "$TIMEZONE" -a -f "/usr/share/zoneinfo/${TIMEZONE}" ]; then
        cp /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
        echo "Timezone: $TIMEZONE"
    else
        echo "Timezone: UTC"
    fi

    # Show locale
    echo "Locale: $LANG"

    # Deactivate Composer Mode if so requested
    case "${T3_COMPOSER_MODE,,}" in
        on|yes|1|true)
            echo "Composer manages TYPO3 extensions"
            ;;

        off|no|0|false)
            sed -E \
                -e "s/define *\( *'TYPO3_COMPOSER_MODE' *, *TRUE *\) *;/define('TYPO3_COMPOSER_MODE', FALSE);/" \
                -i $TYPO3_ROOT/vendor/typo3/autoload-include.php
            rm -rf $TYPO3_ROOT/composer.* $APACHE_HOME/.composer
            echo "TYPO3 plugin manages TYPO3 extensions"
            ;;

        *)
            echo "Unknown Composer Mode option: '$T3_COMPOSER_MODE'"
            exit 1
            ;;
    esac
fi

# Set up developer/XDebug/production mode
case "${MODE,,}" in
	dev)
		echo "Apache/TYPO3 in developer mode"
		MODE=dev
        XDEBUG=
		;;

    xdebug)
		echo "Apache/TYPO3 in developer mode with XDebug support"
		MODE=dev
        XDEBUG=y
		;;

	prod|'')
		echo "Apache/TYPO3 in production mode"
		MODE=prod
        XDEBUG=
		;;

	*)
		echo "Unknown mode: '$MODE'. Defaulting to production mode"
		MODE=prod
		;;
esac

ln -sf /etc/apache2/conf.d/mode.conf.${MODE} /etc/apache2/conf.d/mode.conf
ln -sf /etc/php7/mode.${MODE}.template /etc/php7/conf.d/zz_50_mode.ini

# php.ini setting overrides
export \
    | awk -F ' |=' \
        -e 'BEGIN { IGNORECASE = 1 }' \
        -e '$2 ~ /^PHP_/ { gsub("^PHP_", "", $2); gsub(/'"'"'/, "", $3); printf "%s=%s\n", $2, $3; }' \
    > /etc/php7/conf.d/zz_99_overrides.ini

if [ -s /etc/php7/conf.d/zz_99_overrides.ini ]; then
	echo "Overriding these php.ini settings:"
	cat /etc/php7/conf.d/zz_99_overrides.ini | sed 's/\(.*\)/  \1/'
fi

# Enable/disable XDebug support
if [ -n "$XDEBUG" ]; then
    # Connect back only if host IP not specified
    export REMOTE_HOST=$HOST_IP
    test -n "$HOST_IP"
    export REMOTE_CONNECT_BACK=$?

	cat /etc/php7/xdebug.ini.template | envsubst > /etc/php7/conf.d/xdebug.ini
	echo "XDebug enabled:"
    grep -E '^xdebug\.remote_(host|connect_back)=' /etc/php7/conf.d/xdebug.ini \
        | sed 's/\(.*\)/  \1/'

else
	truncate -s 0 /etc/php7/conf.d/xdebug.ini
	echo "XDebug disabled"
fi

# root created missing paths for volumes also in $APACHE_HOME, therefore:
chown -R $APACHE_USER: $APACHE_HOME 

# Save/update the list of directories to be excluded from Composer operations
# only if $COMPOSER_EXCLUDE has been set to any (even an empty) value
if [ ! -z ${COMPOSER_EXCLUDE+x} ]; then
    echo "$COMPOSER_EXCLUDE" > $COMPOSER_EXCLUDE_FILE
fi

if [ -f $COMPOSER_EXCLUDE_FILE ] && [ -n "$(cat $COMPOSER_EXCLUDE_FILE)" ]; then
    echo "Excluded from Composer:"
    while IFS=':' read -ra DIRS; do
        for D in "${DIRS[@]}"; do
            echo "  $D"
        done
    done <<< "$(cat $COMPOSER_EXCLUDE_FILE)"
fi

# Start MariaDB/PostgreSQL if so requested
if [ $$ -eq 1 ]; then
    # Show this ahead of the database log
    echo $'Ctrl-C to stop the container\n'
    trap "echo \$'\nContainer stopped'" EXIT

    # Accept abbreviated database types
    DB_SUCCESS=
    [[ -n $T3_DB_TYPE && mariadb == ${T3_DB_TYPE,,}* ]] && start_mysql && DB_SUCCESS=1
    [[ -n $T3_DB_TYPE && postgresql == ${T3_DB_TYPE,,}* ]] && start_pg && DB_SUCCESS=1
    [[ -z $T3_DB_TYPE || sqlite == ${T3_DB_TYPE,,}* ]] && DB_SUCCESS=1
    [[ -n $DB_SUCCESS ]] || { echo "Unknown database type: '$T3_DB_TYPE'"; exit 1; }
fi

# Execute Dockerfile CMD or command line, passing host signals to the exec'd process
exec "$@"
